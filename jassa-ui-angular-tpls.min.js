/*
 * jassa-ui-angular
 * https://github.com/GeoKnow/Jassa-UI-Angular

 * Version: 0.0.1-SNAPSHOT - 2014-03-21
 * License: MIT
 */
angular.module("ui.jassa",["ui.jassa.tpls","ui.jassa.constraint-list","ui.jassa.facet-tree","ui.jassa.facet-value-list","ui.jassa.sparql-table"]),angular.module("ui.jassa.tpls",["template/constraint-list/constraint-list.html","template/facet-tree/facet-dir-content.html","template/facet-tree/facet-tree-item.html","template/facet-value-list/facet-value-list.html","template/sparql-table/sparql-table.html"]),angular.module("ui.jassa.constraint-list",[]).controller("ConstraintListCtrl",["$scope","$rootScope",function(a){var b=this,c=function(){var b=a.facetTreeConfig;a.constraintManager=b?a.facetTreeConfig.getFacetConfig().getConstraintManager():null},d=function(){c(),b.refresh()};a.ObjectUtils=Jassa.util.ObjectUtils;var e="[ObjectUtils.hashCode(sparqlService), ObjectUtils.hashCode(facetTreeConfig)]";a.$watch(e,function(){d()},!0);var f=function(a){var b,c=a.getName();switch(c){case"equal":var d=""+a.getDeclaredPath();""===d&&(d="()"),b=d+" = "+a.getValue();break;default:b=a}return b};b.refresh=function(){var b,c=a.constraintManager;if(c){var d=c.getConstraints();b=_(d).map(function(a){var b={constraint:a,label:""+f(a)};return b})}else b=[];a.constraints=b},a.removeConstraint=function(b){a.constraintManager.removeConstraint(b.constraint)}}]).directive("constraintList",function(){return{restrict:"EA",replace:!0,templateUrl:"template/constraint-list/constraint-list.html",transclude:!1,require:"constraintList",scope:{sparqlService:"=",facetTreeConfig:"=",onSelect:"&select"},controller:"ConstraintListCtrl"}}),angular.module("ui.jassa.facet-tree",[]).controller("FacetTreeCtrl",["$rootScope","$scope","$q",function(a,b,c){var d=this,e=function(){var a=b.sparqlService&&b.facetTreeConfig;b.facetTreeService=a?Jassa.facete.FaceteUtils.createFacetTreeService(b.sparqlService,b.facetTreeConfig,null):null},f=function(){e(),d.refresh()};b.ObjectUtils=Jassa.util.ObjectUtils;var g="[ObjectUtils.hashCode(sparqlService), ObjectUtils.hashCode(facetTreeConfig)]";b.$watch(g,function(){f()},!0),b.doFilter=function(a,c){b.facetTreeConfig.getPathToFilterString().put(a,c),d.refresh()},d.refresh=function(){var d=b.facet,e=d?d.item.getPath():new facete.Path;if(b.facetTreeService){var f=Jassa.facete.FaceteUtils.createFacetTreeTagger(b.facetTreeConfig.getPathToFilterString()),g=b.facetTreeService.fetchFacetTree(e);Jassa.sponate.angular.bridgePromise(g,c.defer(),a).then(function(a){f.applyTags(a),b.facet=a})}else b.facet=null},b.toggleCollapsed=function(a){Jassa.util.CollectionUtils.toggleItem(b.facetTreeConfig.getExpansionSet(),a);var c=b.facetTreeConfig.getExpansionMap().get(a);null==c&&b.facetTreeConfig.getExpansionMap().put(a,1),d.refresh()},b.selectIncoming=function(a){if(console.log("Incoming selected at path "+a),b.facetTreeConfig){var c=b.facetTreeConfig.getExpansionMap().get(a);2!=c&&(b.facetTreeConfig.getExpansionMap().put(a,2),d.refresh())}},b.selectOutgoing=function(a){if(console.log("Outgoing selected at path "+a),b.facetTreeConfig){var c=b.facetTreeConfig.getExpansionMap().get(a);1!=c&&(b.facetTreeConfig.getExpansionMap().put(a,1),d.refresh())}},b.selectFacetPage=function(a,c){var e=c.item.getPath(),f=b.facetTreeConfig.getFacetStateProvider().getFacetState(e),g=f.getResultRange();console.log("Facet state for path "+e+": "+f);var h=g.getLimit()||0,i=h?(a-1)*h:null;g.setOffset(i),d.refresh()},b.toggleSelected=function(a){b.onSelect({path:a})},b.toggleTableLink=function(a){tableMod.togglePath(a),b.$emit("facete:refresh")}}]).directive("facetTree",function(){return{restrict:"EA",replace:!0,templateUrl:"template/facet-tree/facet-tree-item.html",transclude:!1,require:"facetTree",scope:{sparqlService:"=",facetTreeConfig:"=",onSelect:"&select"},controller:"FacetTreeCtrl",compile:function(){return function(){}}}}),angular.module("ui.jassa.facet-value-list",[]).controller("FacetValueListCtrl",["$rootScope","$scope","$q",function(a,b,c){b.filterText="",b.pagination={totalItems:0,currentPage:1,maxSize:5};var d=null,e=this,f={};f.FacetValueService=Class.create({initialize:function(a,b){this.sparqlService=a,this.facetTreeConfig=b},getFacetTreeConfig:function(){return this.facetTreeConfig},createFacetValueFetcher:function(a,b){var c=this.facetTreeConfig.getFacetConfig(),d=Jassa.facete.FaceteUtils.createFacetConceptGenerator(c),e=d.createConceptResources(a,!0),g=(new Jassa.facete.ConstraintTaggerFactory(c.getConstraintManager()),new Jassa.sponate.StoreFacade(this.sparqlService)),h=Jassa.sponate.SponateUtils.createDefaultLabelMap();g.addMap(h,"labels"),labelsStore=g.labels;var i={};b&&(i={$or:[{hiddenLabels:{$elemMatch:{id:{$regex:b,$options:"i"}}}},{id:{$regex:b,$options:"i"}}]});var j=labelsStore.find(i).concept(e,!0),k=new f.FacetValueFetcher(j,this.facetTreeConfig,a);return k}}),f.FacetValueFetcher=Class.create({initialize:function(a,b,c){this.baseFlow=a,this.facetTreeConfig=b,this.path=c},fetchCount:function(){var a=this.baseFlow.count();return a},fetchData:function(a,b){var c=this.baseFlow.skip(a).limit(b),d=this,e=c.asList(!0).pipe(function(a){var b=d.path,c=d.facetTreeConfig.getFacetConfig(),e=new Jassa.facete.ConstraintTaggerFactory(c.getConstraintManager()),f=e.createConstraintTagger(b),g=_(a).map(function(a){var c=a.id,d=a.displayLabel?a.displayLabel:""+a.id,e={displayLabel:d,path:b,node:c,tags:f.getTags(c)};return e});return g});return e}});var g=function(){var a=b.sparqlService&&b.facetTreeConfig&&b.path;d=a?new f.FacetValueService(b.sparqlService,b.facetTreeConfig):null},h=function(){g(),e.refresh()};b.ObjectUtils=Jassa.util.ObjectUtils;var i='[ObjectUtils.hashCode(sparqlService), ObjectUtils.hashCode(facetTreeConfig), "" + path, pagination.currentPage]';b.$watch(i,function(){h()},!0),b.toggleConstraint=function(a){var b=d.getFacetTreeConfig().getFacetConfig().getConstraintManager(),c=new facete.ConstraintSpecPathValue("equal",a.path,a.node);b.toggleConstraint(c)},e.refresh=function(){var e=b.path;if(!d||!e)return b.totalItems=0,void(b.facetValues=[]);var f=d.createFacetValueFetcher(b.path,b.filterText),g=f.fetchCount(),h=10,i=(b.pagination.currentPage-1)*h,j=f.fetchData(i,h);Jassa.sponate.angular.bridgePromise(g,c.defer(),a).then(function(a){b.pagination.totalItems=a}),Jassa.sponate.angular.bridgePromise(j,c.defer(),a).then(function(a){b.facetValues=a})},b.filterTable=function(a){b.filterText=a,h()}}]).directive("facetValueList",function(){return{restrict:"EA",replace:!0,templateUrl:"template/facet-value-list/facet-value-list.html",transclude:!1,require:"facetValueList",scope:{sparqlService:"=",facetTreeConfig:"=",path:"=",onSelect:"&select"},controller:"FacetValueListCtrl"}}),angular.module("ui.jassa.sparql-table",[]).controller("SparqlTableCtrl",["$scope","$rootScope","$q",function(a,b,c){var d=(Jassa.rdf,Jassa.sparql),e=Jassa.service,f=Jassa.util,g=(Jassa.sponate,function(a,b){f.ArrayUtils.clear(b.getSortConditions());for(var c=0;c<a.fields.length;++c){var d=a.fields[c],e=a.directions[c],g=0;if("asc"===e?g=1:"desc"===e&&(g=-1),0!==g){var h=new facete.SortCondition(d,g);b.getSortConditions().push(h)}}}),h=function(a){var b=a.getProjectVars().getVarList(),c=d.VarUtils.getVarNames(b),e=_(c).map(function(a){var b={field:a,displayName:a};return b});return e};e.SparqlTableService=Class.create({initialize:function(a,b,c,d){this.sparqlService=a,this.query=b,this.timeoutInMillis=c||3e3,this.secondaryCountLimit=d||1e3},fetchCount:function(){var a=this.query.clone();a.setLimit(null),a.setOffset(null);var b=e.ServiceUtils.fetchCountQuery(this.sparqlService,this.query,this.timeoutInMillis,this.secondaryCountLimit);return b},fetchData:function(a,b){var c=this.query.clone();c.setLimit(a),c.setOffset(b);var d=this.sparqlService.createQueryExecution(c),e=d.execSelect().pipe(function(a){for(var b=[],d=c.getProjectVars().getVarList(),e=function(a,b){var c={};return _(a).each(function(a){var d=a.getName();c[d]=""+b.get(a)}),c};a.hasNext();){var f=a.next(),g=e(d,f);b.push(g)}return b});return e},getSchema:function(){var a=this.query,b=a.getProjectVars().getVarList(),c=(d.VarUtils.getVarNames(b),h(a));return c}});var i=function(){var b=a.sparqlService,c=a.config.queryFactory,d=c.createQuery(),f=new e.SparqlTableService(b,d);return f};a.$watch("gridOptions.sortInfo",function(b){var c=a.config.tableMod;g(b,c),a.refreshData()},!0),a.$watch("[pagingOptions, filterOptions]",function(){a.refreshData()},!0),a.ObjectUtils=f.ObjectUtils,a.$watch("[ObjectUtils.hashCode(sparqlService), ObjectUtils.hashCode(config)]",function(){a.refresh()},!0),a.totalServerItems=0,a.pagingOptions={pageSizes:[10,50,100],pageSize:10,currentPage:1},a.refresh=function(){var b=i();a.refreshSchema(b),a.refreshPageCount(b),a.refreshData(b)},a.refreshSchema=function(b){b=b||i(),a.colDefs=b.getSchema()},a.refreshPageCount=function(d){d=d||i();var e=d.fetchCount();Jassa.sponate.angular.bridgePromise(e,c.defer(),b).then(function(b){a.totalServerItems=b.count})},a.refreshData=function(d){d=d||i();var e=a.pagingOptions.currentPage,f=a.pagingOptions.pageSize,g=(e-1)*f,h=d.fetchData(f,g);Jassa.sponate.angular.bridgePromise(h,c.defer(),b).then(function(b){a.myData=b})};var j=[];if(ngGridFlexibleHeightPlugin){var k=ngGridFlexibleHeightPlugin;j.push(new k(30))}a.myData=[],a.gridOptions={data:"myData",enablePaging:!0,useExternalSorting:!0,showFooter:!0,totalServerItems:"totalServerItems",sortInfo:{fields:[],directions:[],columns:[]},pagingOptions:a.pagingOptions,filterOptions:a.filterOptions,plugins:j,columnDefs:"colDefs"},a.refresh()}]).directive("sparqlTable",["$parse",function(){return{restrict:"EA",replace:!0,templateUrl:"template/sparql-table/sparql-table.html",controller:"SparqlTableCtrl",scope:{sparqlService:"=",config:"=",onSelect:"&select",onUnselect:"&unselect"},link:function(){}}}]),angular.module("template/constraint-list/constraint-list.html",[]).run(["$templateCache",function(a){a.put("template/constraint-list/constraint-list.html",'<ul>\n  	<li ng-show="constraints.length == 0" style="color: #aaaaaa;">(no constraints)</li>\n   	<li ng-repeat="constraint in constraints"><a href="" ng-click="removeConstraint(constraint)">{{constraint.label}}</a></li>\n</ul>\n')}]),angular.module("template/facet-tree/facet-dir-content.html",[]).run(["$templateCache",function(a){a.put("template/facet-tree/facet-dir-content.html",'\n<!-- ng-show="dirset.pageCount > 1 || dirset.children.length > 5" -->\n\n<div style="width: 100%; background-color: #eeeeff;">\n	<div style="padding-right: 16px; padding-left: {{16*(dirset.path.getLength()+1)}}px">\n\n		<form class="form-inline" role="form" ng-submit="doFilter(dirset.path, dirset.filter.filterString)">\n\n			<div class="form-group">\n				<input type="text" class="form-control input-sm" placeholder="Filter" ng-model="dirset.filter.filterString" value="{{dirset.filter.filterString}}" />\n			</div>\n			<div class="form-group">\n				<button type="submit" class="btn btn-default input-sm">Filter</button>\n			</div>\n			<div class="form-group" ng-if="dirset.pageCount > 1" style="background-color: #eeeeff">\n				<pagination\n					style="padding-left: {{16*(dirset.path.getLength()+1)}}px"\n					class="pagination-tiny" max-size="7"\n					total-items="dirset.childFacetCount" page="dirset.pageIndex"\n					boundary-links="true" rotate="false"\n					on-select-page="selectFacetPage(page, facet)" first-text="<<"\n					previous-text="<" next-text=">" last-text=">>" />\n			</div>\n\n		</form>\n	</div>\n</div>\n\n\n<!--                 		<div ng-show="dirset.pageCount != 1" style="width:100%; background-color: #eeeeff"> -->\n<!--     		         		<pagination style="padding-left: {{16 * (dirset.path.getLength() + 1)}}px" class="pagination-tiny" max-size="7" total-items="dirset.childFacetCount" page="dirset.pageIndex" boundary-links="true" rotate="false" on-select-page="selectFacetPage(page, facet)" first-text="<<" previous-text="<" next-text=">" last-text=">>"></pagination> -->\n<!--                 		</div> -->\n\n<span ng-show="dirset.children.length == 0"\n	style="color: #aaaaaa; padding-left: {{16*(dirset.path.getLength()+1)}}px">(no\n	entries)</span>\n\n<div style="padding-left: {{16*(dirset.path.getLength()+1)}}px"\n	ng-repeat="facet in dirset.children"\n	ng-include="\'template/facet-tree/facet-tree-item.html\'" ></div>\n\n\n')}]),angular.module("template/facet-tree/facet-tree-item.html",[]).run(["$templateCache",function(a){a.put("template/facet-tree/facet-tree-item.html",'<div ng-class="{\'frame\': facet.isExpanded}">\n	<div class="facet-row" ng-class="{\'highlite\': facet.isExpanded}" ng-mouseover="facet.isHovered=true" ng-mouseleave="facet.isHovered=false">\n		<a ng-show="facet.isExpanded" href="" ng-click="toggleCollapsed(facet.item.getPath())"><span class="glyphicon glyphicon-chevron-down"></span></a>\n		<a ng-show="!facet.isExpanded" href="" ng-click="toggleCollapsed(facet.item.getPath())"><span class="glyphicon glyphicon-chevron-right"></span></a>\n		<a data-rdf-term="{{facet.item.getNode().toString()}}" title="{{facet.item.getNode().getUri()}}" href="" ng-click="toggleSelected(facet.item.getPath())">{{facet.item.getNode().getUri()}}</a>\n\n\n		<a ng-visible="facet.isHovered || facet.table.isContained" href="" ng-click="toggleTableLink(facet.item.getPath())"><span class="glyphicon glyphicon-list-alt"></span></a>\n\n\n		<span style="float: right" class="badge">{{facet.item.getDistinctValueCount()}}</span>	\n	</div>\n	<div ng-if="facet.isExpanded" style="width:100%"> \n\n\n		<tabset class="tabset-small">\n			<tab heading="Incoming Facets" active="{{facet.isIncomingActive === true}}" select="selectIncoming(facet.item.getPath())">\n				<div ng-repeat="dirset in [facet.incoming]" ng-include="\'template/facet-tree/facet-dir-content.html\'"></div>\n			</tab>\n			<tab heading="Outgoing Facets" active="{{facet.isOutgoingActive === true}}" select="selectOutgoing(facet.item.getPath())">					\n				<div ng-repeat="dirset in [facet.outgoing]" ng-include="\'template/facet-tree/facet-dir-content.html\'"></div>\n			</tab>\n		</tabset>\n	</div>\n</div>\n')}]),angular.module("template/facet-value-list/facet-value-list.html",[]).run(["$templateCache",function(a){a.put("template/facet-value-list/facet-value-list.html",'<div class="frame">\n	<form ng-submit="filterTable(filterText)">\n	    <input type="text" ng-model="filterText" />\n		<input class="btn-primary" type="submit" value="Filter" />\n	</form>\n	<table>\n              <tr><th>Value</th><th>Constrained</th></tr>\n<!-- <th>Count</th> -->\n	    <tr ng-repeat="item in facetValues">\n                  <td>{{item.displayLabel}}</td>\n<!--                    <td>todo</td> -->\n                  <td><input type="checkbox" ng-model="item.tags.isConstrainedEqual" ng-change="toggleConstraint(item)" /></td>\n              </tr>\n      	</table>\n  		<pagination class="pagination-small" total-items="pagination.totalItems" page="pagination.currentPage" max-size="pagination.maxSize" boundary-links="true" rotate="false" num-pages="pagination.numPages"></pagination>\n</div>\n')}]),angular.module("template/sparql-table/sparql-table.html",[]).run(["$templateCache",function(a){a.put("template/sparql-table/sparql-table.html",'<div>\n<div ng-grid="gridOptions"></div>\n</div>\n')}]);